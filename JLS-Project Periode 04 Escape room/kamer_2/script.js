// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let gameState = {
    sleutelGevonden: false,
    notitieGevonden: false,
    deurCode: "4219",
    huidigeVraag: null,
    spelActief: true
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã
const ROOM_ID = 2;
const VRAAG_IDS = {
    KAST: 1,
    KLUIS: 2, 
    DEUR: 3
};

// DOM elementen
const elementen = {
    kast: document.getElementById('kast'),
    kluis: document.getElementById('kluis'),
    deur: document.getElementById('deur'),
    vraagModal: document.getElementById('vraag-modal'),
    vraagTekst: document.getElementById('vraag-tekst'),
    hintTekst: document.getElementById('hint-tekst'),
    antwoordInput: document.getElementById('antwoord-input'),
    bevestigBtn: document.getElementById('bevestig-btn'),
    hintBtn: document.getElementById('hint-btn'),
    annuleerBtn: document.getElementById('annuleer-btn'),
    notitieModal: document.getElementById('notitie-modal'),
    sluitNotitieBtn: document.getElementById('sluit-notitie-btn'),
    sleutelIcon: document.getElementById('sleutel-icon'),
    notitieIcon: document.getElementById('notitie-icon'),
    sleutelSlot: document.getElementById('sleutel-slot'),
    notitieSlot: document.getElementById('notitie-slot'),
    timer: document.getElementById('timer')
};

// –¢–∞–π–º–µ—Ä
let tijdOver = 300; // 5 –º–∏–Ω—É—Ç
const timerInterval = setInterval(() => {
    if (!gameState.spelActief) return;
    
    tijdOver--;
    const minuten = Math.floor(tijdOver / 60);
    const seconden = tijdOver % 60;
    elementen.timer.textContent = `${minuten}:${seconden.toString().padStart(2, '0')}`;
    
    if (tijdOver <= 60) {
        elementen.timer.classList.add('timer-warning');
    }
    
    if (tijdOver <= 0) {
        gameOver();
    }
}, 1000);


// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function laadVraagUitDatabase(questionId, roomId) {
    try {
        toonStatusBericht('Loading vraag...', 'info');
        
        const response = await fetch(`get-question.php?id=${questionId}&roomId=${roomId}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success && data.data) {
            return {
                id: data.data.id,
                tekst: data.data.question,
                antwoord: data.data.answer,
                hint: data.data.hint,
                beloning: bepaalBeloning(questionId) // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ ID –≤–æ–ø—Ä–æ—Å–∞
            };
        } else {
            throw new Error(data.message || 'Onbekende fout bij het laden van de vraag');
        }
    } catch (error) {
        console.error('Fout bij het laden van vraag:', error);
        toonStatusBericht(`‚ùå Fout bij laden vraag: ${error.message}`, 'error');
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –ø–æ ID –≤–æ–ø—Ä–æ—Å–∞
function bepaalBeloning(questionId) {
    switch(questionId) {
        case VRAAG_IDS.KAST:
            return 'sleutel';
        case VRAAG_IDS.KLUIS:
            return 'notitie';
        case VRAAG_IDS.DEUR:
            return 'ontsnapping';
        default:
            return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function toonStatusBericht(bericht, type = 'info') {
    const bestaandBericht = document.querySelector('.status-message');
    if (bestaandBericht) {
        bestaandBericht.remove();
    }
    
    const statusDiv = document.createElement('div');
    statusDiv.className = 'status-message';
    statusDiv.textContent = bericht;
    
    if (type === 'success') {
        statusDiv.style.borderColor = '#00ff00';
        statusDiv.style.color = '#00ff00';
    } else if (type === 'error') {
        statusDiv.style.borderColor = '#ff0000';
        statusDiv.style.color = '#ff0000';
    }
    
    document.body.appendChild(statusDiv);
    
    setTimeout(() => {
        if (statusDiv.parentNode) {
            statusDiv.remove();
        }
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞ (—Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –ë–î)
async function toonVraag(vraagId) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    elementen.vraagModal.classList.remove('verborgen');
    elementen.vraagTekst.textContent = 'Vraag wordt geladen...';
    elementen.bevestigBtn.disabled = true;
    
    const vraag = await laadVraagUitDatabase(vraagId, ROOM_ID);
    
    if (!vraag) {
        sluitVraagModal();
        return;
    }
    
    gameState.huidigeVraag = vraag;
    elementen.vraagTekst.textContent = vraag.tekst;
    elementen.hintTekst.classList.add('verborgen');
    elementen.antwoordInput.value = '';
    elementen.bevestigBtn.disabled = false;
    elementen.antwoordInput.focus();
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ö–∏–Ω—Ç–∞
function toonHint() {
    if (!gameState.huidigeVraag || !gameState.huidigeVraag.hint) {
        toonStatusBericht('Geen hint beschikbaar voor deze vraag.', 'info');
        return;
    }
    
    elementen.hintTekst.textContent = `üí° Hint: ${gameState.huidigeVraag.hint}`;
    elementen.hintTekst.classList.remove('verborgen');
    toonStatusBericht('Hint onthuld!', 'info');
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ (ZONDER FLASH EFFECTEN)
function controleerAntwoord() {
    if (!gameState.huidigeVraag) return;
    
    const gegevenAntwoord = elementen.antwoordInput.value.trim().toLowerCase();
    const juisteAntwoord = gameState.huidigeVraag.antwoord.toLowerCase();
    
    if (gegevenAntwoord === juisteAntwoord) {
        verwerkJuistAntwoord(gameState.huidigeVraag);
        sluitVraagModal();
    } else {
        toonStatusBericht('‚ùå Fout antwoord! Probeer het opnieuw.', 'error');
        elementen.antwoordInput.value = '';
        elementen.antwoordInput.focus();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
function verwerkJuistAntwoord(vraag) {
    switch(vraag.beloning) {
        case 'sleutel':
            gameState.sleutelGevonden = true;
            elementen.sleutelIcon.classList.remove('verborgen');
            elementen.sleutelSlot.classList.add('heeft-item');
            toonStatusBericht('üîë Geweldig! Je hebt een sleutel gevonden!', 'success');
            break;

        case 'notitie':
            gameState.notitieGevonden = true;
            elementen.notitieIcon.classList.remove('verborgen');
            elementen.notitieSlot.classList.add('heeft-item');
            toonStatusBericht('üìã Perfect! Je hebt een belangrijke notitie gevonden!', 'success');
            break;

        case 'ontsnapping':
            winSpel();
            break;
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞
function sluitVraagModal() {
    elementen.vraagModal.classList.add('verborgen');
    elementen.bevestigBtn.disabled = false;
    gameState.huidigeVraag = null;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
elementen.kast.addEventListener('click', () => {
    if (gameState.sleutelGevonden) {
        toonStatusBericht('Je hebt de sleutel al uit deze kast gehaald.', 'info');
        return;
    }
    toonVraag(VRAAG_IDS.KAST);
});

elementen.kluis.addEventListener('click', () => {
    if (gameState.notitieGevonden) {
        toonStatusBericht('Je hebt de notitie al uit deze kluis gehaald.', 'info');
        return;
    }
    toonVraag(VRAAG_IDS.KLUIS);
});

elementen.deur.addEventListener('click', () => {
    if (!gameState.sleutelGevonden) {
        toonStatusBericht('üîí De deur is op slot! Je hebt een sleutel nodig.', 'error');
        return;
    }
    
    if (!gameState.notitieGevonden) {
        toonStatusBericht('üîë Je hebt de sleutel, maar er is nog een code nodig!', 'error');
        return;
    }
    
    toonVraag(VRAAG_IDS.DEUR);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞
elementen.bevestigBtn.addEventListener('click', controleerAntwoord);
elementen.hintBtn.addEventListener('click', toonHint);
elementen.annuleerBtn.addEventListener('click', sluitVraagModal);

// Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
elementen.antwoordInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        controleerAntwoord();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
elementen.notitieSlot.addEventListener('click', () => {
    if (gameState.notitieGevonden) {
        elementen.notitieModal.classList.remove('verborgen');
    } else {
        toonStatusBericht('Je hebt nog geen notitie gevonden.', 'info');
    }
});

elementen.sleutelSlot.addEventListener('click', () => {
    if (gameState.sleutelGevonden) {
        toonStatusBericht('üîë Je hebt de sleutel! Gebruik hem om de deur te openen.', 'success');
    } else {
        toonStatusBericht('Je hebt nog geen sleutel gevonden.', 'info');
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–ø–∏—Å–∫–∏
elementen.sluitNotitieBtn.addEventListener('click', () => {
    elementen.notitieModal.classList.add('verborgen');
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è
function gameOver() {
    gameState.spelActief = false;
    clearInterval(timerInterval);
    
    toonStatusBericht('‚è∞ Tijd is op! Game Over!', 'error');
    
    setTimeout(() => {
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        window.location.href = '../kamer_1/losevd.html';
    }, 2000);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–±–µ–¥—ã
function winSpel() {
    gameState.spelActief = false;
    clearInterval(timerInterval);
    
    toonStatusBericht('üéâ Gefeliciteerd! Je bent ontsnapt!', 'success');
    
    setTimeout(() => {
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–±–µ–¥—ã
        window.location.href = '../kamer_1/winvd.html';
    }, 2000);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function controleerDatabaseVerbinding() {
    try {
        const response = await fetch('get-question.php?id=1&roomId=2');
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ Database verbinding OK');
            return true;
        } else {
            console.warn('‚ö†Ô∏è Database verbinding probleem:', data.message);
            return false;
        }
    } catch (error) {
        console.error('‚ùå Database verbinding fout:', error);
        toonStatusBericht('‚ö†Ô∏è Probleem met database verbinding. Sommige functies werken mogelijk niet.', 'error');
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
async function initializeGame() {
    console.log('üéÆ Escape Room - Kamer 2 geladen');
    console.log('üéØ Doel: Vind de sleutel, ontdek de code, en ontsnap!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await controleerDatabaseVerbinding();
    
    toonStatusBericht('üè• Welkom in de medische afdeling! Zoek naar aanwijzingen...', 'info');
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
initializeGame();